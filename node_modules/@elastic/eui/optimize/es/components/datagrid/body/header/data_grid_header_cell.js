import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import classnames from 'classnames';
import React, { useContext, useState, useRef, useCallback, useMemo, memo } from 'react';
import { tabbable } from 'tabbable';
import { keys } from '../../../../services';
import { useGeneratedHtmlId } from '../../../../services/accessibility';
import { EuiScreenReaderOnly } from '../../../accessibility';
import { EuiI18n } from '../../../i18n';
import { EuiIcon } from '../../../icon';
import { EuiListGroup } from '../../../list_group';
import { EuiPopover } from '../../../popover';
import { DataGridFocusContext } from '../../utils/focus';
import { getColumnActions } from './column_actions';
import { EuiDataGridColumnResizer } from './data_grid_column_resizer';
import { EuiDataGridHeaderCellWrapper } from './data_grid_header_cell_wrapper';
import { jsx as ___EmotionJSX } from "@emotion/react";
var CellContent = function CellContent(_ref) {
  var children = _ref.children,
    title = _ref.title,
    arrow = _ref.arrow;
  return ___EmotionJSX(React.Fragment, null, ___EmotionJSX("div", {
    title: title,
    className: "euiDataGridHeaderCell__content"
  }, children), arrow);
};
var _ref3 = process.env.NODE_ENV === "production" ? {
  name: "mc0thx-EuiDataGridHeaderCell",
  styles: "margin-inline-start:auto;label:EuiDataGridHeaderCell;"
} : {
  name: "mc0thx-EuiDataGridHeaderCell",
  styles: "margin-inline-start:auto;label:EuiDataGridHeaderCell;",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};
export var EuiDataGridHeaderCell = /*#__PURE__*/memo(function (_ref2) {
  var _classnames;
  var index = _ref2.index,
    column = _ref2.column,
    columns = _ref2.columns,
    columnWidths = _ref2.columnWidths,
    defaultColumnWidth = _ref2.defaultColumnWidth,
    setColumnWidth = _ref2.setColumnWidth,
    setVisibleColumns = _ref2.setVisibleColumns,
    switchColumnPos = _ref2.switchColumnPos,
    sorting = _ref2.sorting,
    schema = _ref2.schema,
    schemaDetectors = _ref2.schemaDetectors;
  var id = column.id,
    display = column.display,
    displayAsText = column.displayAsText,
    displayHeaderCellProps = column.displayHeaderCellProps;
  var width = columnWidths[id] || defaultColumnWidth;
  var columnType = schema[id] ? schema[id].columnType : null;
  var _useContext = useContext(DataGridFocusContext),
    setFocusedCell = _useContext.setFocusedCell,
    focusFirstVisibleInteractiveCell = _useContext.focusFirstVisibleInteractiveCell;
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isPopoverOpen = _useState2[0],
    setIsPopoverOpen = _useState2[1];
  var popoverArrowNavigationProps = usePopoverArrowNavigation();
  var columnActions = useMemo(function () {
    return getColumnActions({
      column: column,
      columns: columns,
      schema: schema,
      schemaDetectors: schemaDetectors,
      setVisibleColumns: setVisibleColumns,
      focusFirstVisibleInteractiveCell: focusFirstVisibleInteractiveCell,
      setIsPopoverOpen: setIsPopoverOpen,
      sorting: sorting,
      switchColumnPos: switchColumnPos,
      setFocusedCell: setFocusedCell
    });
  }, [column, columns, schema, schemaDetectors, setVisibleColumns, focusFirstVisibleInteractiveCell, setIsPopoverOpen, sorting, switchColumnPos, setFocusedCell]);
  var showColumnActions = columnActions && columnActions.length > 0;
  var actionsButtonRef = useRef(null);
  var focusActionsButton = useCallback(function () {
    var _actionsButtonRef$cur;
    (_actionsButtonRef$cur = actionsButtonRef.current) === null || _actionsButtonRef$cur === void 0 ? void 0 : _actionsButtonRef$cur.focus();
  }, []);
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isActionsButtonFocused = _useState4[0],
    setIsActionsButtonFocused = _useState4[1];
  var _useSortingUtils = useSortingUtils({
      sorting: sorting,
      id: id,
      showColumnActions: showColumnActions
    }),
    sortingArrow = _useSortingUtils.sortingArrow,
    ariaSort = _useSortingUtils.ariaSort,
    sortingScreenReaderText = _useSortingUtils.sortingScreenReaderText;
  var sortingAriaId = useGeneratedHtmlId({
    prefix: 'euiDataGridCellHeader',
    suffix: 'sorting'
  });
  var actionsAriaId = useGeneratedHtmlId({
    prefix: 'euiDataGridCellHeader',
    suffix: 'actions'
  });
  var classes = classnames((_classnames = {}, _defineProperty(_classnames, "euiDataGridHeaderCell--".concat(columnType), columnType), _defineProperty(_classnames, 'euiDataGridHeaderCell--hasColumnActions', showColumnActions), _defineProperty(_classnames, 'euiDataGridHeaderCell--isActionsPopoverOpen', isPopoverOpen), _classnames), displayHeaderCellProps === null || displayHeaderCellProps === void 0 ? void 0 : displayHeaderCellProps.className);
  var title = displayAsText || id;
  var children = display || displayAsText || id;
  return ___EmotionJSX(EuiDataGridHeaderCellWrapper, _extends({}, displayHeaderCellProps, {
    className: classes,
    id: id,
    index: index,
    width: width,
    "aria-sort": ariaSort,
    hasActionsPopover: showColumnActions,
    isActionsButtonFocused: isActionsButtonFocused,
    focusActionsButton: focusActionsButton
  }), column.isResizable !== false && width != null ? ___EmotionJSX(EuiDataGridColumnResizer, {
    columnId: id,
    columnWidth: width,
    setColumnWidth: setColumnWidth
  }) : null, !showColumnActions ? ___EmotionJSX(React.Fragment, null, ___EmotionJSX(CellContent, {
    title: title,
    arrow: sortingArrow
  }, children), sortingScreenReaderText && ___EmotionJSX(EuiScreenReaderOnly, null, ___EmotionJSX("p", null, sortingScreenReaderText))) : ___EmotionJSX(React.Fragment, null, ___EmotionJSX("button", {
    className: "euiDataGridHeaderCell__button",
    onClick: function onClick() {
      return setIsPopoverOpen(function (isPopoverOpen) {
        return !isPopoverOpen;
      });
    },
    onFocus: function onFocus() {
      return setIsActionsButtonFocused(true);
    },
    onBlur: function onBlur() {
      return setIsActionsButtonFocused(false);
    },
    "aria-describedby": "".concat(sortingAriaId, " ").concat(actionsAriaId),
    ref: actionsButtonRef,
    "data-test-subj": "dataGridHeaderCellActionButton-".concat(id)
  }, ___EmotionJSX(CellContent, {
    title: title,
    arrow: sortingArrow
  }, children), ___EmotionJSX(EuiPopover, _extends({
    display: "block",
    panelPaddingSize: "none",
    offset: 7,
    anchorPosition: "downRight",
    css: _ref3 // Align to right
    ,
    focusTrapProps: {
      // We need to override the default EuiPopover `onClickOutside` since the anchor is separate from the actual button
      onClickOutside: function onClickOutside(event) {
        var _actionsButtonRef$cur2;
        if (((_actionsButtonRef$cur2 = actionsButtonRef.current) === null || _actionsButtonRef$cur2 === void 0 ? void 0 : _actionsButtonRef$cur2.contains(event.target)) === false) {
          setIsPopoverOpen(false);
        }
      }
    },
    button: ___EmotionJSX("div", {
      className: "euiDataGridHeaderCell__icon"
    }, ___EmotionJSX(EuiIcon, {
      type: "boxesVertical",
      size: "s",
      color: "text"
    })),
    isOpen: isPopoverOpen,
    closePopover: function closePopover() {
      return setIsPopoverOpen(false);
    }
  }, popoverArrowNavigationProps), ___EmotionJSX(EuiListGroup, {
    listItems: columnActions,
    gutterSize: "none",
    "data-test-subj": "dataGridHeaderCellActionGroup-".concat(id)
  }))), ___EmotionJSX("p", {
    id: sortingAriaId,
    hidden: true
  }, sortingScreenReaderText), ___EmotionJSX("p", {
    id: actionsAriaId,
    hidden: true
  }, ___EmotionJSX(EuiI18n, {
    token: "euiDataGridHeaderCell.headerActions",
    default: "Click to view column header actions"
  }))));
});
EuiDataGridHeaderCell.displayName = 'EuiDataGridHeaderCell';

/**
 * Column sorting utility helpers
 */
export var useSortingUtils = function useSortingUtils(_ref4) {
  var _sorting$columns;
  var sorting = _ref4.sorting,
    id = _ref4.id,
    showColumnActions = _ref4.showColumnActions;
  var sortedColumn = useMemo(function () {
    return sorting === null || sorting === void 0 ? void 0 : sorting.columns.find(function (col) {
      return col.id === id;
    });
  }, [sorting, id]);
  var isColumnSorted = !!sortedColumn;
  var hasOnlyOneSort = (sorting === null || sorting === void 0 ? void 0 : (_sorting$columns = sorting.columns) === null || _sorting$columns === void 0 ? void 0 : _sorting$columns.length) === 1;

  /**
   * Arrow icon
   */
  var sortingArrow = useMemo(function () {
    return isColumnSorted ? ___EmotionJSX(EuiIcon, {
      type: sortedColumn.direction === 'asc' ? 'sortUp' : 'sortDown',
      color: "text",
      className: "euiDataGridHeaderCell__sortingArrow",
      "data-test-subj": "dataGridHeaderCellSortingIcon-".concat(id)
    }) : null;
  }, [id, isColumnSorted, sortedColumn]);

  /**
   * aria-sort attribute - should only be used when a single column is being sorted
   * @see https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/Attributes/aria-sort
   * @see https://www.w3.org/WAI/ARIA/apg/example-index/table/sortable-table.html
   * @see https://github.com/w3c/aria/issues/283 for potential future multi-column usage
   */
  var ariaSort = isColumnSorted && hasOnlyOneSort ? sorting.columns[0].direction === 'asc' ? 'ascending' : 'descending' : undefined;

  /**
   * Sorting status - screen reader text
   */
  var sortingScreenReaderText = useMemo(function () {
    var _sorting$columns2;
    if (!isColumnSorted) return null;
    if (!showColumnActions && hasOnlyOneSort) return null; // in this scenario, the `aria-sort` attribute will be used by screen readers
    return ___EmotionJSX(React.Fragment, null, sorting === null || sorting === void 0 ? void 0 : (_sorting$columns2 = sorting.columns) === null || _sorting$columns2 === void 0 ? void 0 : _sorting$columns2.map(function (_ref5, index) {
      var columnId = _ref5.id,
        direction = _ref5.direction;
      if (hasOnlyOneSort) {
        if (direction === 'asc') {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByAscendingSingle",
            default: "Sorted ascending",
            key: index
          });
        } else {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByDescendingSingle",
            default: "Sorted descending",
            key: index
          });
        }
      } else if (index === 0) {
        if (direction === 'asc') {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByAscendingFirst",
            default: "Sorted by {columnId}, ascending",
            values: {
              columnId: columnId
            },
            key: index
          });
        } else {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByDescendingFirst",
            default: "Sorted by {columnId}, descending",
            values: {
              columnId: columnId
            },
            key: index
          });
        }
      } else {
        if (direction === 'asc') {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByAscendingMultiple",
            default: ", then sorted by {columnId}, ascending",
            values: {
              columnId: columnId
            },
            key: index
          });
        } else {
          return ___EmotionJSX(EuiI18n, {
            token: "euiDataGridHeaderCell.sortedByDescendingMultiple",
            default: ", then sorted by {columnId}, descending",
            values: {
              columnId: columnId
            },
            key: index
          });
        }
      }
    }), ".");
  }, [isColumnSorted, showColumnActions, hasOnlyOneSort, sorting]);
  return {
    sortingArrow: sortingArrow,
    ariaSort: ariaSort,
    sortingScreenReaderText: sortingScreenReaderText
  };
};

/**
 * Add keyboard arrow navigation to the cell actions popover
 * to match the UX of the rest of EuiDataGrid
 */
export var usePopoverArrowNavigation = function usePopoverArrowNavigation() {
  var popoverPanelRef = useRef(null);
  var actionsRef = useRef(undefined);
  var panelRef = useCallback(function (ref) {
    popoverPanelRef.current = ref;
    actionsRef.current = ref ? tabbable(ref) : undefined;
  }, []);
  var onKeyDown = useCallback(function (e) {
    var _actionsRef$current;
    if (e.key !== keys.ARROW_DOWN && e.key !== keys.ARROW_UP) return;
    if (!((_actionsRef$current = actionsRef.current) !== null && _actionsRef$current !== void 0 && _actionsRef$current.length)) return;
    e.preventDefault();
    var initialState = document.activeElement === popoverPanelRef.current;
    var currentIndex = !initialState ? actionsRef.current.findIndex(function (el) {
      return document.activeElement === el;
    }) : -1;
    var lastIndex = actionsRef.current.length - 1;
    var indexToFocus;
    if (initialState) {
      if (e.key === keys.ARROW_DOWN) {
        indexToFocus = 0;
      } else if (e.key === keys.ARROW_UP) {
        indexToFocus = lastIndex;
      }
    } else {
      if (e.key === keys.ARROW_DOWN) {
        indexToFocus = currentIndex + 1;
        if (indexToFocus > lastIndex) {
          indexToFocus = 0;
        }
      } else if (e.key === keys.ARROW_UP) {
        indexToFocus = currentIndex - 1;
        if (indexToFocus < 0) {
          indexToFocus = lastIndex;
        }
      }
    }
    actionsRef.current[indexToFocus].focus();
  }, []);
  return {
    panelRef: panelRef,
    panelProps: {
      onKeyDown: onKeyDown
    },
    popoverScreenReaderText: ___EmotionJSX(EuiI18n, {
      token: "euiDataGridHeaderCell.actionsPopoverScreenReaderText",
      default: "To navigate through the list of column actions, press the Tab or Up and Down arrow keys."
    })
  };
};