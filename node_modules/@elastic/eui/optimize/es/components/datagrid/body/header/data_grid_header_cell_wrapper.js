import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["id", "index", "width", "className", "children", "hasActionsPopover", "isActionsButtonFocused", "focusActionsButton"];
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import classnames from 'classnames';
import React, { useContext, useEffect, useState, useCallback } from 'react';
import { DataGridFocusContext } from '../../utils/focus';
import { HandleInteractiveChildren } from '../cell/focus_utils';

/**
 * This is a wrapper that handles repeated concerns between control &
 * standard header cells. Most of its shared logic is around focus state/UX,
 * but it also DRY's out certain class/data-test-subj/style attributes
 */
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiDataGridHeaderCellWrapper = function EuiDataGridHeaderCellWrapper(_ref) {
  var id = _ref.id,
    index = _ref.index,
    width = _ref.width,
    className = _ref.className,
    children = _ref.children,
    hasActionsPopover = _ref.hasActionsPopover,
    isActionsButtonFocused = _ref.isActionsButtonFocused,
    focusActionsButton = _ref.focusActionsButton,
    rest = _objectWithoutProperties(_ref, _excluded);
  var classes = classnames('euiDataGridHeaderCell', className);

  // Must be a state and not a ref to trigger a HandleInteractiveChildren rerender
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    headerEl = _useState2[0],
    setHeaderEl = _useState2[1];
  var _useContext = useContext(DataGridFocusContext),
    setFocusedCell = _useContext.setFocusedCell,
    onFocusUpdate = _useContext.onFocusUpdate;
  var updateCellFocusContext = useCallback(function () {
    setFocusedCell([index, -1]);
  }, [index, setFocusedCell]);
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isFocused = _useState4[0],
    setIsFocused = _useState4[1];
  useEffect(function () {
    onFocusUpdate([index, -1], function (isFocused) {
      setIsFocused(isFocused);
    });
  }, [index, onFocusUpdate]);
  useEffect(function () {
    if (isFocused && headerEl) {
      // Only focus the cell if not already focused on something in the cell
      if (!headerEl.contains(document.activeElement)) {
        headerEl.focus();
      }
    }
  }, [isFocused, headerEl]);

  // For cell headers with actions, auto-focus into the button instead of the cell wrapper div
  // The button text is significantly more useful to screen readers (e.g. contains sort order & hints)
  var onFocus = useCallback(function (e) {
    if (hasActionsPopover && e.target === headerEl) {
      focusActionsButton === null || focusActionsButton === void 0 ? void 0 : focusActionsButton();
    }
  }, [hasActionsPopover, focusActionsButton, headerEl]);
  return ___EmotionJSX("div", _extends({
    role: "columnheader",
    ref: setHeaderEl,
    tabIndex: isFocused && !isActionsButtonFocused ? 0 : -1,
    onFocus: onFocus,
    className: classes,
    "data-test-subj": "dataGridHeaderCell-".concat(id),
    "data-gridcell-column-id": id,
    "data-gridcell-column-index": index,
    "data-gridcell-row-index": "-1",
    "data-gridcell-visible-row-index": "-1",
    style: width != null ? {
      width: "".concat(width, "px")
    } : {}
  }, rest), ___EmotionJSX(HandleInteractiveChildren, {
    cellEl: headerEl,
    updateCellFocusContext: updateCellFocusContext,
    renderFocusTrap: !hasActionsPopover
  }, children));
};