import { css as _css } from "@emotion/react";
var _excluded = ["children", "id", "className", "element", "screenReaderOnly", "size", "textTransform"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import React from 'react';
import PropTypes from "prop-types";
import classNames from 'classnames';
import { useEuiTheme } from '../../services';
import { EuiTitle } from '../title';
import { EuiScreenReaderOnly } from '../accessibility';
import { jsx as ___EmotionJSX } from "@emotion/react";
export var EuiSideNavHeading = function EuiSideNavHeading(_ref) {
  var children = _ref.children,
    id = _ref.id,
    className = _ref.className,
    _ref$element = _ref.element,
    HeadingElement = _ref$element === void 0 ? 'h2' : _ref$element,
    _ref$screenReaderOnly = _ref.screenReaderOnly,
    screenReaderOnly = _ref$screenReaderOnly === void 0 ? false : _ref$screenReaderOnly,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 'xs' : _ref$size,
    textTransform = _ref.textTransform,
    rest = _objectWithoutProperties(_ref, _excluded);
  var classes = classNames('euiSideNav__heading', className);
  var _useEuiTheme = useEuiTheme(),
    euiTheme = _useEuiTheme.euiTheme;
  return screenReaderOnly ? ___EmotionJSX(EuiScreenReaderOnly, null, ___EmotionJSX(HeadingElement, _extends({
    id: id,
    className: classes
  }, rest), children)) : ___EmotionJSX(EuiTitle, {
    size: size,
    textTransform: textTransform
  }, ___EmotionJSX(HeadingElement, _extends({
    id: id,
    className: classes,
    css: /*#__PURE__*/_css({
      marginBlockEnd: euiTheme.size.l
    }, ";label:EuiSideNavHeading;")
  }, rest), children));
};
EuiSideNavHeading.propTypes = {
  children: PropTypes.node.isRequired,
  /**
     * The actual HTML heading element to wrap the `heading`.
     * Default is `h2`
     */
  element: PropTypes.oneOf(["h1", "h2", "h3", "h4", "h5", "h6", "span"]),
  /**
     * For best accessibility, `<nav>` elements should have a nested heading. But you can hide this element if it's redundent from something else (except on mobile).
     */
  screenReaderOnly: PropTypes.bool
};